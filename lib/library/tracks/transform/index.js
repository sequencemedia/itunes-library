"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.toJSON=toJSON;exports.toJS=toJS;exports.toES=toES;var _sacredFs=require("sacred-fs");var _debug=_interopRequireDefault(require("debug"));var itunesLibraryParser=_interopRequireWildcard(require("@sequencemedia/itunes-library-parser"));var _=require("../../..");function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}else{var newObj={};if(obj!=null){for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):{};if(desc.get||desc.set){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}}newObj.default=obj;return newObj;}}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}const{library:{tracks:{transform:{toJSON:transformToJSON,toJS:transformToJS,toES:transformToES}}}}=itunesLibraryParser;const error=(0,_debug.default)('itunes-library:transform:error');function listenerFactory({xml,statsMap,jar,transform=()=>{},func=()=>{}}){return async function(eventType){if(eventType==='change'){try{const stats=await(0,_sacredFs.stat)(xml);if((0,_.hasChanges)(stats,statsMap)){(0,_.putChanges)(stats,statsMap);func((await transform(jar,xml)));}}catch({message}){error(message);}}};}async function toJSON(jar,xml,func=()=>{}){let watcher;try{const stats=await(0,_sacredFs.stat)(xml);const statsMap=new Map();(0,_.putChanges)(stats,statsMap);const s=await transformToJSON(jar,xml);const listener=listenerFactory({jar,xml,statsMap,transform:transformToJSON,func});watcher=await(0,_sacredFs.watch)(xml,{encoding:'utf8'},listener);watcher.on('error',({message})=>{error('Error in watcher',message);});return s;}catch({message}){if(watcher)watcher.close();error(message);}}async function toJS(jar,xml,func=()=>{}){let watcher;try{const stats=await(0,_sacredFs.stat)(xml);const statsMap=new Map();(0,_.putChanges)(stats,statsMap);const o=await transformToJS(jar,xml);const listener=listenerFactory({jar,xml,statsMap,transform:transformToJS,func});watcher=await(0,_sacredFs.watch)(xml,{encoding:'utf8'},listener);watcher.on('error',({message})=>{error('Error in watcher',message);});return o;}catch({message}){if(watcher)watcher.close();error(message);}}async function toES(jar,xml,func=()=>{}){let watcher;try{const stats=await(0,_sacredFs.stat)(xml);const statsMap=new Map();(0,_.putChanges)(stats,statsMap);const m=await transformToES(jar,xml);const listener=listenerFactory({jar,xml,statsMap,transform:transformToES,func});watcher=await(0,_sacredFs.watch)(xml,{encoding:'utf8'},listener);watcher.on('error',({message})=>{error('Error in watcher',message);});return m;}catch({message}){if(watcher)watcher.close();error(message);}}